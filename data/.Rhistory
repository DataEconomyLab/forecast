covid19FR <- subset(covid19, geoId=="FR")
c1 <- ggplot(data=covid19KR, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
theme_bw(base_family = "NanumGothic")
c2 <- ggplot(data=covid19CN, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("중국") +
theme_bw(base_family = "NanumGothic")
c3 <- ggplot(data=covid19US, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("미국") +
theme_bw(base_family = "NanumGothic")
c4 <- ggplot(data=covid19FR, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("프랑스") +
theme_bw(base_family = "NanumGothic")
grid.arrange(c1, c2, c3, c4, ncol=2, nrow=2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(zoo)
library(ggplot2)
library(gridExtra)
covid19 <- read.csv("C:/Users/ljyjj/Documents/방송대/3학년과제/coviddata.csv", header=T)
covid19KR <- subset(covid19, geoId=="KR")
covid19CN <- subset(covid19, geoId=="CN")
covid19US <- subset(covid19, geoId=="US")
covid19FR <- subset(covid19, geoId=="FR")
c1 <- ggplot(data=covid19KR, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
theme_bw(base_family = "NanumGothic")
c2 <- ggplot(data=covid19CN, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("중국") +
theme_bw(base_family = "NanumGothic")
c3 <- ggplot(data=covid19US, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("미국") +
theme_bw(base_family = "NanumGothic")
c4 <- ggplot(data=covid19FR, aes(x=as.Date(dateRep, format="%d/%m/%Y"), y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("프랑스") +
theme_bw(base_family = "NanumGothic")
grid.arrange(c1, c2, c3, c4, ncol=2, nrow=2)
install.packages("coronavirus)
dfs
""
sdf
"
install.packages("coronavirus")
library(coronavirus)
cononavirus
coronavirus
UCBAdmissions
data(UCBAdmissions)
str(UCBAdmissions)
par(mfrow=c(1,2))
mosaicplot(apply(UCBAdmissions, c(2,1), sum), color=c("red","blue"), main="전체 합격자 비율", ylab="불합격/합격", xlab="성별")
mosaicplot(~Dept+Gender+Admit, data=UCBAdmissions, color=c("red","blue"), dir=c("v","v","h"), off=1, main="과별 합격자 비율", ylab="불합격/합격", xlab="과별/성별")
library(coronavirus)
library(ggplot2)
data(coronavirus)
str(coronavirus)
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks) +
theme_bw(base_family = "NanumGothic")
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y")) +
theme_bw(base_family = "NanumGothic")
library(coronavirus)
library(ggplot2)
library(scales)
data(coronavirus)
str(coronavirus)
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y")) +
theme_bw(base_family = "NanumGothic")
library(coronavirus)
library(ggplot2)
library(scales)
data(coronavirus)
str(coronavirus)
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y%M"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m"), expand=c(0.01,0.01)) +
geom_point() +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_continuous(breaks=seq()) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
theme_bw(base_family = "NanumGothic")
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
#scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(0.01,0.01)) +
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(1,1)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(0.1,0.1)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
library(coronavirus)
library(ggplot2)
library(scales)
data(coronavirus)
str(coronavirus)
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
datebreaks <- seq(as.Date("2020-01-22"), as.Date("2021-01-21"), "1 year")
#scale_x_date(breaks=datebreaks, labels=date_format("%Y-%m-%d"), expand=c(0.01,0.01)) +
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_date(breaks="1 months", labels=date_format("%Y-%m"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y-%m"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
covid19KR
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw()
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c("2020-01-22", "2021-01-21")) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(color="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01)) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = c('2020-01-22', '2021-01-21')) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line() +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_line(linetype = "dashed") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
covid19KR
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_area(colour="black", fill="blue", alpha=.2) +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_area(colour="black", fill="blue") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_area(colour="black", fill="white") +
xlab("날짜") +
ylab("신규확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
library(coronavirus)
library(ggplot2)
library(scales)
data(coronavirus)
str(coronavirus)
covid19KR <- subset(coronavirus, country=="Korea, South", type = "confirmed")
ggplot(data=covid19KR, aes(x=date, y=cases)) +
geom_area(colour="black", fill="white") +
xlab("날짜") +
ylab("확진자수") +
ggtitle("한국") +
scale_x_date(breaks="1 months", labels=date_format("%Y%m%d"), expand=c(0.01,0.01), limits = as.Date(c('2020-01-22', '2021-01-21'))) +
theme_bw(base_family = "NanumGothic")
#################################################################################################################
setwd("C:/Users/ljyjj/Documents/GitHub/forecast/data")
forecast_report <- ts(read.csv("forecast_report.csv", header=TRUE), start=1982, frequency=4)
library(tseries)
gdp <- forecast_report[,1]
gdp_sa <- forecast_report[,2]
adf.test(log(gdp))
adf.test(diff(log(gdp_sa)))
adf.test(log(gdp_sa))
adf.test(diff(log(gdp_sa)))
library(forecast)
plot(log(gdp), col="black")
plot(diff(diff(log(gdp),4)), col="black")
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
acf(diff(log(gdp),4))
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,1,0), seasonal=c(1,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(forecast_report[,1]), order=c(1,1,1), seasonal=c(1,1,1))
summary(report_fit1)
report_fit2 = arima(log(forecast_report[,1]), order=c(0,1,2), seasonal=c(1,1,1))
summary(report_fit2)
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,1,0), seasonal=c(1,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(forecast_report[,1]), order=c(1,1,1), seasonal=c(1,1,1))
summary(report_fit1)
report_fit2 = arima(log(forecast_report[,1]), order=c(0,1,2), seasonal=c(1,1,1))
summary(report_fit2)
# ARIMA 모형의 진단
tsdiag(report_fit)
plot(forecast(report_fit, h=12))
plot(diff(diff(log(gdp_sa),4)), col="black")
acf(diff(log(gdp_sa),4))
pacf(diff(log(gdp_sa),4))
acf(diff(log(gdp_sa),4))
# ARIMA 모형의 추정
report_fit = arima(log(gdp_sa), order=c(0,1,0), seasonal=c(1,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(forecast_report[,1]), order=c(1,1,1), seasonal=c(1,1,1))
summary(report_fit1)
report_fit2 = arima(log(forecast_report[,1]), order=c(0,1,2), seasonal=c(1,1,1))
summary(report_fit2)
# ARIMA 모형의 진단
tsdiag(report_fit)
plot(forecast(report_fit, h=12))
library(forecast)
plot(log(gdp), col="black")
plot(diff(diff(log(gdp_sa),4)), col="black")
acf(diff(log(gdp_sa),4))
pacf(diff(log(gdp_sa),4))
adf.test(log(gdp))
adf.test(diff(log(gdp_sa)))
library(forecast)
plot(log(gdp), col="black")
plot(diff(diff(log(gdp_sa),4)), col="black")
acf(diff(log(gdp_sa),4))
pacf(diff(log(gdp_sa),4))
# ARIMA 모형의 추정
report_fit = arima(log(gdp_sa), order=c(0,1,0), seasonal=c(1,1,1))
summary(report_fit)
# ARIMA 모형의 추정
report_fit = arima(log(gdp_sa), order=c(0,4,0), seasonal=c(1,1,1))
summary(report_fit)
# ARIMA 모형의 추정
report_fit = arima(log(gdp_sa), order=c(0,2,0), seasonal=c(1,1,1))
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,2,0), seasonal=c(1,1,1))
summary(report_fit)
auto.arima(gdp)
auto.arima(log(gdp)
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,2,0), seasonal=c(1,1,1))
auto.arima(log(gdp))
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,1,1), seasonal=c(0,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(gdp), order=c(1,1,1), seasonal=c(0,1,1))
summary(report_fit1)
report_fit2 = arima(log(gdp), order=c(0,1,2), seasonal=c(0,1,1))
summary(report_fit2)
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(gdp), order=c(1,1,1), seasonal=c(0,1,1))
summary(report_fit1)
report_fit2 = arima(log(gdp), order=c(0,1,2), seasonal=c(0,1,1))
summary(report_fit2)
# ARIMA 모형의 진단
tsdiag(report_fit)
plot(forecast(report_fit, h=12))
#################################################################################################################
setwd("C:/Users/ljyjj/Documents/GitHub/forecast/data")
forecast_report <- ts(read.csv("forecast_report.csv", header=TRUE), start=1982, frequency=4)
library(tseries)
gdp <- forecast_report[,1]
adf.test(log(gdp))
library(forecast)
plot(log(gdp), col="black")
plot(diff(diff(log(gdp_sa),4)), col="black")
acf(diff(log(gdp_sa),4))
pacf(diff(log(gdp_sa),4))
auto.arima(log(gdp))
# ARIMA 모형의 추정
report_fit = arima(log(gdp), order=c(0,1,1), seasonal=c(0,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(gdp), order=c(1,1,1), seasonal=c(0,1,1))
summary(report_fit1)
report_fit2 = arima(log(gdp), order=c(0,1,2), seasonal=c(0,1,1))
summary(report_fit2)
# ARIMA 모형의 진단
tsdiag(report_fit)
plot(forecast(report_fit, h=12))
############################################################################################
setwd("C:/Users/ljyjj/Documents/GitHub/forecast/data")
forecast_report <- ts(read.csv("forecast_report.csv", header=TRUE), start=1982, frequency=4)
library(tseries)
gdp <- forecast_report[,1]
############################################################################################
setwd("C:/Users/ljyjj/Documents/GitHub/forecast/data")
forecast_report <- ts(read.csv("forecast_report.csv", header=TRUE), start=1982, frequency=4)
library(tseries)
gdp <- forecast_report[,1]
adf.test(log(gdp))
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
library(forecast)
plot(log(gdp), col="black")
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
auto.arima(log(gdp))
plot(log(gdp), col="black")
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
plot(log(gdp), col="black")
acf(diff(log(gdp),4))
library(forecast)
plot(log(gdp), col="black")
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
par(mfrow=c(1,2))
plot(log(gdp), col="black")
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
par(mfrow=c(2,1))
acf(diff(log(gdp),4))
pacf(diff(log(gdp),4))
# ARIMA 모형의 추정
auto.arima(log(gdp))
report_fit = arima(log(gdp), order=c(0,1,1), seasonal=c(0,1,1))
summary(report_fit)
# ARIMA 모형의 과대적합 검토
report_fit1 = arima(log(gdp), order=c(1,1,1), seasonal=c(0,1,1))
summary(report_fit1)
report_fit2 = arima(log(gdp), order=c(0,1,2), seasonal=c(0,1,1))
summary(report_fit2)
# ARIMA 모형의 진단
tsdiag(report_fit)
plot(forecast(report_fit, h=12))
